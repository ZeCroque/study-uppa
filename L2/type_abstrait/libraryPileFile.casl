library libraryPileFile 
%%****************************************************
%%        TYPE ABSTRAIT PILE &  FILE
%%   Objet: Spécification Algébrique en CASL
%%   Prouvée par: HETS(Isabelle)
%%****************************************************
%% liste des importations (downloading)
from Basic/Numbers get Int
from Basic/SimpleDatatypes    get     Boolean

%%specification du type abstrait PILE
spec PILE [sort Elem]  =
          Boolean
then  
sort  Pile[Elem] 
ops
	pileVide:  Pile[Elem]  ;
     	empiler:   Pile[Elem]  * Elem   -> Pile[Elem];
        estVide:   Pile[Elem] -> Boolean;
     	depiler:   Pile[Elem] ->? Pile[Elem];
 	sommet:    Pile[Elem]  ->? Elem


forall e1: Elem; p1: Pile[Elem]
%% domaines des opérations 
	 .def sommet(p1)  <=> estVide(p1) =False  
	 .def depiler(p1) <=> estVide(p1)  =False  
	 .estVide(pileVide)= True 
         .estVide(empiler(p1,e1))  =False  
	 .sommet(empiler(p1,e1)) = e1 
%% Définition inductive de depiler à partir de pileVide et empiler
	 .depiler(empiler(p1,e1)) = pileVide  when estVide(p1)=True  else empiler(depiler(p1),sommet(p1))
end


%%Spécification en CASL du type abstrait FILE 
spec File [sort Elem]  = 
  Boolean
then
sort File[Elem] 

ops
       fileVide: File[Elem];
       enfiler:  File[Elem]  *  Elem   -> File[Elem];
       estVide : File[Elem]  ->  Boolean;
       defiler:  File[Elem]->? File[Elem]
       premier:  File[Elem]	->? Elem

forall e1: Elem; f1: File[Elem]
%% domaines des opérations 
	 . def premier(f1) 	<=> 	estVide(f1)    = False
	 . def defiler(f1) 	<=>   	estVide(f1)    = False

%% axiome concernant le predicat estVide
	 . estVide(fileVide)         = True
         . estVide(enfiler(f1,e1))   = False

%% axiomes concernant les operations	
	 . premier(enfiler (f1,e1)) = e1 when estVide(f1) = True  else premier(f1)
	 . defiler(enfiler(f1,e1)) = fileVide  when estVide(f1) = True  else enfiler(defiler(f1),e1)
end