library librarySetBag
%%****************************************************
%%        TYPE ABSTRAIT SET &  BAG
%%   Objet: Spécification Algébrique en CASL
%%   Prouvée par: HETS(Log SPASS)
%%
%%   			Date création le 2/3/2007
%%   			Auteur: K. OURIACHI, Professeur des universités
%%   			UNIVERSITE de PAU/PAYS de l'ADOUR
%%
%%****************************************************
%% liste des importations (downloading)
from Basic/Numbers get Int

%% Spécification minimale du type abstrait des Set

spec Set0 [sort Elem] =
generated type Set[Elem] ::= setVide |
                             ajouter (Set[Elem]; Elem)
pred
	appartient: Elem * Set[Elem]
forall x, y: Elem; M,N:Set[Elem]
. not  appartient(x,setVide)
. appartient( x, ajouter(M,y) ) <=> x = y \/ appartient(x,M)
. M = N <=>  forall x : Elem . appartient(x,M) <=> appartient(x,N)
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Spécification étendue du type abstrait des Set

spec Set [sort Elem] =
	Set0 [sort Elem]
then
preds
     	estVide: Set[Elem];
     	inclut: Set[Elem] * Set[Elem]
op
	enlever: Set[Elem] * Elem -> Set[Elem];

forall x, y: Elem; M, N: Set[Elem]
	. estVide(M) <=>  M = setVide
	. inclut(M ,N) <=> forall x : Elem. appartient(x, M) => appartient(x, N)
	. enlever(setVide, y) = setVide
	. enlever(ajouter(M ,x ) , y) = enlever(M,y)  when x = y
							             else ajouter(enlever(M ,y),x)
end



%%Spécification minimale du type abstrait des Bag

spec Bag0[sort Elem] given Int =
generated type Bag[Elem] ::=  bagVide |
                              ajouter(Bag[Elem]; Elem)
op
	 frequence : Bag[Elem] * Elem -> Int

forall x, y: Elem; M, N: Bag[Elem]
. frequence(bagVide, y) = 0
. frequence(ajouter(M,x), y) = 1+frequence(M, y) when x = y else frequence(M, y)
. M = N <=> forall x: Elem . frequence(M, x ) = frequence(N, x )
end


%%Spécification étendue du type abstrait des Bag
spec Bag [sort Elem] given Int =
	Bag0 [sort Elem]
then
preds
	estVide : Bag[Elem];
	appartient : Elem * Bag[Elem];
      inclut: Bag[Elem] * Bag[Elem]
op
	enlever: Bag[Elem] * Elem -> Bag[Elem]

forall x,y:Elem; M,N:Bag[Elem]

. estVide (M) <=>  M = bagVide
. appartient(x ,M) <=> frequence(M, x ) > 0
. inclut(M,N) <=> forall x : Elem . frequence(M, x ) <= frequence(N, x )

. enlever(M, x) = N <=>
        forall y: Elem. (frequence(N, y)= frequence(M,x)-1 if x=y) /\
                                   (frequence(N,y)=frequence(M,y) if not(x = y) )
end
